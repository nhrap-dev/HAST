#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Oct 04, 2019 01:33:05 PM PDT  platform: Windows NT

import sys, os, csv, logging, fiona, datetime, json
import xml.etree.ElementTree as ET
import HAST_Analysis as ha
from PIL import Image, ImageTk
import utility
from functools import reduce
#import HAST_GUI as hgui
#XML setup
# tree = ET.parse('settings.xml')
tree = ET.parse(os.path.abspath('Python/settings.xml'))
base = tree.getroot()
"""
for node in tree.find('.//currentrun'):
    node.text = ''
    tree.write('settings.xml')
"""
#Logging setup
LogFileName = tree.find('.//LogFileName').text
Level = tree.find('.//Level').text
#LogFileName = next(next(next(base.iter('data')).iter('Logging')).iter('LogFileName')).text
#Level = next(next(next(base.iter('data')).iter('Logging')).iter('Level')).text
if Level == 'INFO': logging.basicConfig(filename=os.path.abspath('Log/' + LogFileName), filemode='w', level=logging.INFO)
else: logging.basicConfig(filename=LogFileName, filemode='w', level=logging.DEBUG)
logging.info(str(datetime.datetime.now())+' Logging level set to: '+ str(Level))

#Field alias setup
defaultFields = {(item.tag if item.attrib['required'] != 'yes' else item.tag+'*'):item.text.split(',') for item in tree.find('.//AnalysisFields')}
print(defaultFields)
#defaultFields = {(item.tag if item.attrib['required'] != 'yes' else item.tag+'*'):item.text.split(',') for item in next(base.iter('fields'))}#{item.attributes['name'].value:item.firstChild.data.split(',') for item in items}

#Allowed file types setup
file_types = [('Type '+item,item) for item in tree.find('.//InputFileTypes').text.split(',')]
#file_types = [('Type '+item,item) for item in next(next(base.iter('GeneralSettings')).iter('InputFileTypes')).text.split(',')]

logging.debug(str(datetime.datetime.now())+' Field Types: ' + str(file_types))



try:
    import Tkinter as tk
    # from Tkinter import filedialog
except ImportError:
    import tkinter as tk
    # from tkinter import filedialog

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from tkinter import *

InputText = None
SelectVar = None
WindFieldText = None
def set_Tk_var():
    global InputText
    InputText = tk.StringVar()
    global SelectVar
    SelectVar = tk.StringVar()
    global WindFieldText
    WindFieldText = tk.StringVar()

def checkform():# Check validity of form entries
    ents = fields
    root.preCheck = 0
    root.fields={key:''for key, value in fields.items()}
    #root.fields = fields
    #print('fields ',[field.get() for field in fields.values()])
    #root.fields = {key:''for key, value in fields.items()}
    for key, field in ents.items():
        color = "yellow" if '*' not in key else "red"
        ent = field
        value = ent.get().upper()# if type(ent) != str else ent
        if '*' in key: root.valid[key] = False
        if len(root.csvFields) == 0:
            color = None# If no input file is selected there is no coloring.
        elif value != '':
            if value in root.csvFields:
                 root.fields[key] = value
                 color = "green"
                 if '*' in key: root.valid[key] = True
        else:
            for defaultField in list(map(lambda x: x.upper(), defaultFields[key])):
                 if defaultField in root.csvFields:
                      root.fields[key] = root.csvFields[root.csvFields.index(defaultField)]
                      color = "green"
                      if '*' in key: root.valid[key] = True
                      break
        ent.config(background=color)
        if key == 'TerrainID*' or key == 'WBID*':
            if color == 'red': root.preCheck += 1 
    
    if False in root.valid.values(): w.Run.config(fg='grey',command='', state='disabled')
    else: w.Run.config(fg='black', command=analyze, state = 'normal')
    if root.preCheck == 2 and root.check:
        utility.popupmsg('Terrain Id and Web Id have NOT been found in your input file.\n Would you like to go to pre-processing instead?',startPreProcess)
    elif False in root.valid.values() and root.check != False:
        utility.popupmsg('The following required fields have not been found in your input file: \n ' + str(reduce(lambda x, y: x+y.strip('*')+', ' if root.valid[y] == False else x,root.valid,''))[:-2])
    if root.fields['PeakGusts'] != '':
        w.SelectWinfieldButton.configure(state = 'disabled')
        w.WindfieldEntry.configure(state = 'disabled')
    else:
        w.SelectWinfieldButton.configure(state = 'normal')
        w.WindfieldEntry.configure(state = 'normal')
        
    if WindFieldText.get() == '' and root.fields['PeakGusts'] == '' and False not in root.valid.values() :
        w.Run.configure(state = 'disabled')
    else: w.Run.configure(state = 'normal')
    
    root.check = False
    root.after(100, checkform)
    #root.after(100, checkform(button,fields))#Recheck fields every 0.1 second
    
def browse_button():
    root.valid = {}
    root.fields, root.csvFields = utility.browse(root.csvFields,root.fields,tree,'InputFileName',InputText,'InputPath',logging,fields,file_types)
    root.check = True
    tree.getroot().find('.//PreProcessedDataFileName').text = InputText.get()  
    tree.getroot().find('.//WindFieldDataFile').text = WindFieldText.get()
    
def WindfieldBrowse():
    root.WindfieldFields, root.WindfieldCSV = utility.browse(root.WindfieldCSV,root.WindfieldFields,tree,'WindFieldDataFile',WindFieldText,'PWindField',logging,fields,file_types)
    

def analyze():
    logging.info(str(datetime.datetime.now())+' Running analysis ')
    logging.info(str(datetime.datetime.now())+' Input fields: ' + str(InputText))
    for item in tree.find('.//AnalysisFields'):
        item.attrib['inputFieldName'] = root.fields[item.tag] if item.attrib['required'] == 'no' else root.fields[item.tag+'*']
    tree.getroot().find('.//InputFileFieldMap').text = json.dumps(root.fields)
    #tree.getroot().find('.//InputFileName').text = InputText.get()
    tree.getroot().find('.//PreProcessedDataFileName').text = InputText.get()  
    tree.getroot().find('.//WindFieldDataFile').text = WindFieldText.get()
    items = tree.find('.//AnalysisFields')
    for key,value in root.fields.items():
        if value not in items.find('.//'+key.strip('*')).text:
            items.find('.//'+key.strip('*')).text = items.find('.//'+key.strip('*')).text + ',' + value
    tree.write('settings.xml')
    if root.fields['PeakGusts'] != '': ha.HAST_UserSupplied_Analysis()
    else: ha.HAST_Probabilistic_Analysis()
    utility.popupmsg('Analysis of HU Losses is complete.\n Please go to the {} folder to view the results.\n Would you like to exit?'.format(os.path.abspath(os.path.join(os.getcwd(),tree.getroot().find('.//OutputPath').text))),root.destroy)

def start_program():
    import HAST_Analysis_GUI
    HAST_Analysis_GUI.vp_start_gui()

def preCheck():
    print('PRECHECK: ',root.preCheck)
    #if root.preCheck == 2: utility.popupmsg('Terrain Id and Web Id have NOT been found in your input file.\n Would you like to go to pre-processing instead?',startPreProcess)
    #root.after(100,preCheck)
w = None
top_level = None
root = None
fields = None
_img0 = None
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # Modified due to relative path issues - UKS 04/02/2020
    # root.iconbitmap('../Images/Hu_Symbol.ico')
    root.iconbitmap(os.path.abspath('Images/Hu_Symbol.ico'))

    root.csvFields = []# Input csv file fields
    global fields
    fields = {'Longitude*':w.LongitudeEntry,\
    'Latitude*':w.LatitudeEntry,\
    'SOID*':w.SOIDEntry,\
    'BuildingArea*':w.BuildingAreaEntry,\
    'BuildingValue*':w.BuildingValueEntry,\
    'ContentValue*':w.ContentValueEntry,\
    'HUSBT*':w.HUSBTEntry,\
    'TerrainID*':w.TerrainIDEntry,\
    'WBID*':w.WBIDEntry,\
    'PeakGusts':w.PeakGustsEntry}
    root.fields = {key:''for key, value in fields.items()}
    root.valid = {}
    root.WindfieldCSV = []
    root.WindfieldFields = {key:''for key, value in fields.items()}
    #root.WindfieldValid = {}
    root.preCheck = 0
    root.check = False
    # Gets the requested values of the height and widht.
    windowWidth = root.winfo_reqwidth()
    windowHeight = root.winfo_reqheight()
     
    # Gets both half the screen width/height and window width/height
    positionRight = int(root.winfo_screenwidth()/2 - windowWidth)
    positionDown = int(root.winfo_screenheight()/2 - windowHeight)
     
    # Positions the window in the center of the page.
    root.geometry("+{}+{}".format(positionRight, positionDown))
    
    root.after(100, checkform)
    # photo_location = os.path.join(os.getcwd(),'..\images',"FileOpen_small.jpg")
    photo_location = os.path.abspath('Images/FileOpen_small.jpg')

    global _img0
    _img0 = ImageTk.PhotoImage(file=photo_location)
    w.SelectInput.configure(image=_img0)
    w.SelectWinfieldButton.configure(image=_img0)
    

def startPreProcess():
    import HAST_PreProcess_GUI_support
    destroy_window()
    HAST_PreProcess_GUI_support.start_program()

def MainScreen():
    utility.popupmsg('Are you sure you want to go to the main screen?', startMainScreen)

def startMainScreen():
    import HAST_Main_GUI_support
    destroy_window()
    HAST_Main_GUI_support.start_program()

def SelectWindfield():
    WindfieldBrowse()

def Exit():
    utility.popupmsg('Are you sure you want to quit?', destroy_window)
    
def destroy_window():
    # Function which closes the window.
    logging.info(str(datetime.datetime.now())+' Window Closed')
    global top_level
    """
    for node in tree.find('.//currentrun'):
        node.text = ''
    tree.write('settings.xml')
    """
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import HAST_Analysis_GUI
    HAST_Analysis_GUI.vp_start_gui()




