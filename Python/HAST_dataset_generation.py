#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Oct 01, 2019 01:37:45 PM PDT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import HAST_dataset_generation_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    HAST_dataset_generation_support.set_Tk_var()
    top = Toplevel1 (root)
    HAST_dataset_generation_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    HAST_dataset_generation_support.set_Tk_var()
    top = Toplevel1 (w)
    HAST_dataset_generation_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450+909+118")
        top.title("HAST dataset generation")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.GenerateButton = tk.Button(top)
        self.GenerateButton.place(relx=0.183, rely=0.911, height=33, width=108)
        self.GenerateButton.configure(activebackground="#ececec")
        self.GenerateButton.configure(activeforeground="#000000")
        self.GenerateButton.configure(background="#d9d9d9")
        self.GenerateButton.configure(command=HAST_dataset_generation_support.GenerateData)
        self.GenerateButton.configure(disabledforeground="#a3a3a3")
        self.GenerateButton.configure(foreground="#000000")
        self.GenerateButton.configure(highlightbackground="#d9d9d9")
        self.GenerateButton.configure(highlightcolor="black")
        self.GenerateButton.configure(pady="0")
        self.GenerateButton.configure(text='''Generate Data''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.2, rely=0.067, height=26, width=116)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(justify='left')
        self.Label1.configure(text='''SQL Sever Name''')

        self.SQLServersList = ttk.Combobox(top)
        self.SQLServersList.place(relx=0.417, rely=0.067, relheight=0.058
                , relwidth=0.312)
        self.value_list = [*HAST_dataset_generation_support.SQLs,]
        self.SQLServersList.configure(values=self.value_list)
        self.SQLServersList.configure(textvariable=HAST_dataset_generation_support.SQLsText)
        self.SQLServersList.configure(takefocus="")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.2, rely=0.244, height=26, width=46)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(justify='left')
        self.Label2.configure(text='''State''')

        self.StatesList = ttk.Combobox(top)
        self.StatesList.place(relx=0.417, rely=0.244, relheight=0.058
                , relwidth=0.312)
        self.value_list = [*HAST_dataset_generation_support.States,]
        self.StatesList.configure(values=self.value_list)
        self.StatesList.configure(textvariable=HAST_dataset_generation_support.StatesText)
        self.StatesList.configure(takefocus="")

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="-family {Segoe UI} -size 9")
        Popupmenu1.configure(foreground="black")
        sub_menu = tk.Menu(Popupmenu1,tearoff=0)
        Popupmenu1.add_cascade(menu=sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                foreground="#000000",
                label="First")
        sub_menu1 = tk.Menu(Popupmenu1,tearoff=0)
        Popupmenu1.add_cascade(menu=sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                foreground="#000000",
                label="Second")
        Popupmenu1.post(event.x_root, event.y_root)

if __name__ == '__main__':
    vp_start_gui()





