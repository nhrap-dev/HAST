#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Sep 14, 2019 03:36:44 PM PDT  platform: Windows NT

import sys, os, csv, logging
import xml.etree.ElementTree as ET
import HAST_Pre_Process as hpp
#import HAST_GUI as hgui
#XML setup
tree = ET.parse('settings.xml')
base = tree.getroot()
for node in tree.find('.//currentrun'):
    node.text = ''
    tree.write('settings.xml')

#def readXMLNode(sNodeName,ET):
    

#Logging setup
LogFileName = tree.find('.//LogFileName').text
Level = tree.find('.//Level').text
#LogFileName = next(next(next(base.iter('data')).iter('Logging')).iter('LogFileName')).text
#Level = next(next(next(base.iter('data')).iter('Logging')).iter('Level')).text
if Level == 'INFO': logging.basicConfig(filename=LogFileName, filemode='w', level=logging.INFO)
else: logging.basicConfig(filename=LogFileName, filemode='w', level=logging.DEBUG)
logging.info(' Logging level set to: '+ str(Level))

#Field alias setup
defaultFields = {(item.tag if item.attrib['required'] != 'yes' else item.tag+'*'):item.text.split(',') for item in tree.find('.//fields')}
#defaultFields = {(item.tag if item.attrib['required'] != 'yes' else item.tag+'*'):item.text.split(',') for item in next(base.iter('fields'))}#{item.attributes['name'].value:item.firstChild.data.split(',') for item in items}

#Allowed file types setup
file_types = [('Type '+item,item) for item in tree.find('.//InputFileTypes').text.split(',')]
#file_types = [('Type '+item,item) for item in next(next(base.iter('GeneralSettings')).iter('InputFileTypes')).text.split(',')]

logging.debug(' Field Types: ' + str(file_types))

fields = {'Longitude*':'LongitudeEntry',
    'Latitude*':'LatitudeEntry',
    'SOID*':'SOIDEntry',
    'BuildingArea*':'BuildingAreaEntry',
    'BuildingValue*':'BuildingValueEntry',
    'HUSBT*':'HUSBTEntry',
    'ConstructionType':'ConstructionTypeEntry',
    'NumberOfStories':'NumberOfStoriesEntry',
    }

try:
    import Tkinter as tk
    from Tkinter import filedialog
except ImportError:
    import tkinter as tk
    from tkinter import filedialog

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    
def checkform(button,fields):# Check validity of form entries
    ents = fields
    #root.fields = fields
    #print('fields ',[field.get() for field in fields.values()])
    #root.fields = {key:''for key, value in fields.items()}
    for key, field in ents.items():
        color = "yellow" if '*' not in key else "red"
        ent = field
        value = ent.get().upper()# if type(ent) != str else ent
        if '*' in key: root.valid[key] = False
        if len(root.csvFields) == 0:
            color = None# If no input file is selected there is no coloring.
        elif value != '':
            if value in root.csvFields:
                 root.fields[key] = value
                 color = "green"
                 if '*' in key: root.valid[key] = True
        else:
            for defaultField in list(map(lambda x: x.upper(), defaultFields[key])):
                 if defaultField in root.csvFields:
                      root.fields[key] = root.csvFields[root.csvFields.index(defaultField)]
                      color = "green"
                      if '*' in key: root.valid[key] = True
                      break
        ent.config(background=color)
         
    
    if False in root.valid.values(): button.config(fg='grey',command='')
    else: button.config(fg='black', command=analyze)
    
    root.after(100, checkform,button,fields)
    #root.after(100, checkform(button,fields))#Recheck fields every 0.1 second
    
def browse_button(button,fields):
    print('HAST_support.browse_button')
    logging.info(' HAST_support.browse_button')
    sys.stdout.flush()
    root.csvFields = []
    root.fields = {key:''for key, value in fields.items()}
    root.valid = {}
    
    #print('FILE TYPES',*tuple([('type',item.text) for item in next(base.iter('GeneralSettings')).iter('InputFileTypes')])+("all files","*.*"))
    filename = filedialog.askopenfilename(initialdir = os.getcwd() + "../Input",title = "Select file",filetypes = file_types)# Gets input csv file from user
    # Gets field names from input csv file and makes a list
    try:
        with open(filename, "r+") as f:
            reader = csv.reader(f)
            root.csvFields = next(reader)
            logging.debug(' File Open: '+filename+' File Fields: '+ str(root.csvFields))
            root.csvFields = list(map(lambda x: x.upper(), root.csvFields))
    except Exception as e:
        logging.debug(' Failed to open input file. Message: '+str(e))
        return
    
    #Save the input file name and path to the Settings.xml - InputFileName (under this node)
    tree.getroot().find('.//InputFileName').text = filename
    tree.write('settings.xml')
    print(filename,root.csvFields)

def analyze():
    logging.info(' Running analysis ')
    logging.info(' Input fields: ' + str(root.fields))
    tree.getroot().find('.//InputFileFieldMap').text = str(root.fields)
    tree.write('settings.xml')
    hpp.HAST_dataPrep()

def start_program():
    import HAST_GUI
    HAST_GUI.vp_start_gui()
    
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    root.iconbitmap('../Images/Hu_Symbol.ico')
    root.csvFields = []# Input csv file fields
    root.fields = {key:''for key, value in fields.items()}
    root.valid = {}
    
   

def destroy_window():
    # Function which closes the window.
    logging.info(' Window Closed')
    global top_level
    for node in tree.find('.//currentrun'):
        node.text = ''
    tree.write('settings.xml')
    
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import HAST_GUI
    HAST_GUI.vp_start_gui()



